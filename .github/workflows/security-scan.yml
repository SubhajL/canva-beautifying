name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --production
      continue-on-error: true
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  code-scanning:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
  secrets-scanning:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  sast-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/typescript
          p/nextjs
          
  docker-scan:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'docker') || github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: docker build -t beautifyai:latest .
      continue-on-error: true
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'beautifyai:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()
      
  security-headers-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      
    - name: Start application
      run: |
        npm start &
        sleep 30
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        
    - name: Check security headers
      run: |
        response=$(curl -s -I http://localhost:3000)
        
        # Check for required security headers
        headers=(
          "Strict-Transport-Security"
          "X-Frame-Options"
          "X-Content-Type-Options"
          "Content-Security-Policy"
          "Referrer-Policy"
        )
        
        for header in "${headers[@]}"; do
          if echo "$response" | grep -qi "^$header:"; then
            echo "✓ $header header present"
          else
            echo "✗ $header header missing"
            exit 1
          fi
        done
        
  owasp-zap-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v3
    
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'https://beautifyai.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a -j'
      continue-on-error: true
        
  notify-security-issues:
    needs: [dependency-check, code-scanning, secrets-scanning, sast-scan]
    runs-on: ubuntu-latest
    if: failure()
    steps:
    - name: Notify team
      run: |
        echo "Security vulnerabilities detected. Check the Security tab for details."
        # In production, send notifications via Slack/email